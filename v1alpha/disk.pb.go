// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: n0stack/storage/v1alpha/disk.proto

package pstorage

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	api "github.com/n0stack/storage/api"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DiskSpecStatus int32

const (
	DiskSpecStatus_DISK_SPEC_STATUS_UNSPECIFIED DiskSpecStatus = 0
	DiskSpecStatus_ACTIVE                       DiskSpecStatus = 1
	DiskSpecStatus_DRAIN                        DiskSpecStatus = 2
)

// Enum value maps for DiskSpecStatus.
var (
	DiskSpecStatus_name = map[int32]string{
		0: "DISK_SPEC_STATUS_UNSPECIFIED",
		1: "ACTIVE",
		2: "DRAIN",
	}
	DiskSpecStatus_value = map[string]int32{
		"DISK_SPEC_STATUS_UNSPECIFIED": 0,
		"ACTIVE":                       1,
		"DRAIN":                        2,
	}
)

func (x DiskSpecStatus) Enum() *DiskSpecStatus {
	p := new(DiskSpecStatus)
	*p = x
	return p
}

func (x DiskSpecStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskSpecStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_n0stack_storage_v1alpha_disk_proto_enumTypes[0].Descriptor()
}

func (DiskSpecStatus) Type() protoreflect.EnumType {
	return &file_n0stack_storage_v1alpha_disk_proto_enumTypes[0]
}

func (x DiskSpecStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskSpecStatus.Descriptor instead.
func (DiskSpecStatus) EnumDescriptor() ([]byte, []int) {
	return file_n0stack_storage_v1alpha_disk_proto_rawDescGZIP(), []int{0}
}

type DiskFactStatus int32

const (
	DiskFactStatus_DISK_FACT_STATUS_UNSPECIFIED DiskFactStatus = 0
	DiskFactStatus_UP                           DiskFactStatus = 1
	DiskFactStatus_DOWN                         DiskFactStatus = 2
)

// Enum value maps for DiskFactStatus.
var (
	DiskFactStatus_name = map[int32]string{
		0: "DISK_FACT_STATUS_UNSPECIFIED",
		1: "UP",
		2: "DOWN",
	}
	DiskFactStatus_value = map[string]int32{
		"DISK_FACT_STATUS_UNSPECIFIED": 0,
		"UP":                           1,
		"DOWN":                         2,
	}
)

func (x DiskFactStatus) Enum() *DiskFactStatus {
	p := new(DiskFactStatus)
	*p = x
	return p
}

func (x DiskFactStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskFactStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_n0stack_storage_v1alpha_disk_proto_enumTypes[1].Descriptor()
}

func (DiskFactStatus) Type() protoreflect.EnumType {
	return &file_n0stack_storage_v1alpha_disk_proto_enumTypes[1]
}

func (x DiskFactStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskFactStatus.Descriptor instead.
func (DiskFactStatus) EnumDescriptor() ([]byte, []int) {
	return file_n0stack_storage_v1alpha_disk_proto_rawDescGZIP(), []int{1}
}

type DiskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     DiskSpecStatus `protobuf:"varint,1,opt,name=status,proto3,enum=n0stack.storage.v1alpha.DiskSpecStatus" json:"status,omitempty"`
	TotalBytes uint64         `protobuf:"varint,2,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
}

func (x *DiskSpec) Reset() {
	*x = DiskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n0stack_storage_v1alpha_disk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskSpec) ProtoMessage() {}

func (x *DiskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_n0stack_storage_v1alpha_disk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskSpec.ProtoReflect.Descriptor instead.
func (*DiskSpec) Descriptor() ([]byte, []int) {
	return file_n0stack_storage_v1alpha_disk_proto_rawDescGZIP(), []int{0}
}

func (x *DiskSpec) GetStatus() DiskSpecStatus {
	if x != nil {
		return x.Status
	}
	return DiskSpecStatus_DISK_SPEC_STATUS_UNSPECIFIED
}

func (x *DiskSpec) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

type DiskFact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    DiskFactStatus `protobuf:"varint,1,opt,name=status,proto3,enum=n0stack.storage.v1alpha.DiskFactStatus" json:"status,omitempty"`
	UsedBytes uint64         `protobuf:"varint,2,opt,name=used_bytes,json=usedBytes,proto3" json:"used_bytes,omitempty"`
	Url       string         `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *DiskFact) Reset() {
	*x = DiskFact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n0stack_storage_v1alpha_disk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskFact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskFact) ProtoMessage() {}

func (x *DiskFact) ProtoReflect() protoreflect.Message {
	mi := &file_n0stack_storage_v1alpha_disk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskFact.ProtoReflect.Descriptor instead.
func (*DiskFact) Descriptor() ([]byte, []int) {
	return file_n0stack_storage_v1alpha_disk_proto_rawDescGZIP(), []int{1}
}

func (x *DiskFact) GetStatus() DiskFactStatus {
	if x != nil {
		return x.Status
	}
	return DiskFactStatus_DISK_FACT_STATUS_UNSPECIFIED
}

func (x *DiskFact) GetUsedBytes() uint64 {
	if x != nil {
		return x.UsedBytes
	}
	return 0
}

func (x *DiskFact) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *api.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *DiskSpec     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Fact     *DiskFact     `protobuf:"bytes,3,opt,name=fact,proto3" json:"fact,omitempty"`
}

func (x *Disk) Reset() {
	*x = Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n0stack_storage_v1alpha_disk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk) ProtoMessage() {}

func (x *Disk) ProtoReflect() protoreflect.Message {
	mi := &file_n0stack_storage_v1alpha_disk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk.ProtoReflect.Descriptor instead.
func (*Disk) Descriptor() ([]byte, []int) {
	return file_n0stack_storage_v1alpha_disk_proto_rawDescGZIP(), []int{2}
}

func (x *Disk) GetMetadata() *api.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Disk) GetSpec() *DiskSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Disk) GetFact() *DiskFact {
	if x != nil {
		return x.Fact
	}
	return nil
}

type ListDisksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListDisksRequest) Reset() {
	*x = ListDisksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n0stack_storage_v1alpha_disk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDisksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDisksRequest) ProtoMessage() {}

func (x *ListDisksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_n0stack_storage_v1alpha_disk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDisksRequest.ProtoReflect.Descriptor instead.
func (*ListDisksRequest) Descriptor() ([]byte, []int) {
	return file_n0stack_storage_v1alpha_disk_proto_rawDescGZIP(), []int{3}
}

type ListDisksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disks []*Disk `protobuf:"bytes,1,rep,name=disks,proto3" json:"disks,omitempty"`
}

func (x *ListDisksResponse) Reset() {
	*x = ListDisksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n0stack_storage_v1alpha_disk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDisksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDisksResponse) ProtoMessage() {}

func (x *ListDisksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_n0stack_storage_v1alpha_disk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDisksResponse.ProtoReflect.Descriptor instead.
func (*ListDisksResponse) Descriptor() ([]byte, []int) {
	return file_n0stack_storage_v1alpha_disk_proto_rawDescGZIP(), []int{4}
}

func (x *ListDisksResponse) GetDisks() []*Disk {
	if x != nil {
		return x.Disks
	}
	return nil
}

type GetDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDiskRequest) Reset() {
	*x = GetDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n0stack_storage_v1alpha_disk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiskRequest) ProtoMessage() {}

func (x *GetDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_n0stack_storage_v1alpha_disk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiskRequest.ProtoReflect.Descriptor instead.
func (*GetDiskRequest) Descriptor() ([]byte, []int) {
	return file_n0stack_storage_v1alpha_disk_proto_rawDescGZIP(), []int{5}
}

func (x *GetDiskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteDiskRequest) Reset() {
	*x = DeleteDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_n0stack_storage_v1alpha_disk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDiskRequest) ProtoMessage() {}

func (x *DeleteDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_n0stack_storage_v1alpha_disk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDiskRequest.ProtoReflect.Descriptor instead.
func (*DeleteDiskRequest) Descriptor() ([]byte, []int) {
	return file_n0stack_storage_v1alpha_disk_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteDiskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_n0stack_storage_v1alpha_disk_proto protoreflect.FileDescriptor

var file_n0stack_storage_v1alpha_disk_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6e, 0x30, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6e, 0x30, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x22, 0x6e,
	0x30, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x08,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6e, 0x30, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x7c, 0x0a, 0x08, 0x44, 0x69,
	0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6e, 0x30, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xaf, 0x01, 0x0a, 0x04, 0x44, 0x69, 0x73,
	0x6b, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x30, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x30, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x35, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x30, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x6b,
	0x46, 0x61, 0x63, 0x74, 0x52, 0x04, 0x66, 0x61, 0x63, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x30, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x73,
	0x6b, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x22, 0x24, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x27,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x49, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x49, 0x53,
	0x4b, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x49, 0x4e,
	0x10, 0x02, 0x2a, 0x44, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x43,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x32, 0x83, 0x04, 0x0a, 0x0b, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1d, 0x2e, 0x6e, 0x30, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x44, 0x69, 0x73, 0x6b, 0x1a, 0x1d, 0x2e, 0x6e, 0x30, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44,
	0x69, 0x73, 0x6b, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x29, 0x2e, 0x6e, 0x30, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x30, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x69,
	0x73, 0x6b, 0x73, 0x12, 0x7c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x27,
	0x2e, 0x6e, 0x30, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6e, 0x30, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0x7b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x12,
	0x2a, 0x2e, 0x6e, 0x30, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x42, 0x2d,
	0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x30, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x3b, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_n0stack_storage_v1alpha_disk_proto_rawDescOnce sync.Once
	file_n0stack_storage_v1alpha_disk_proto_rawDescData = file_n0stack_storage_v1alpha_disk_proto_rawDesc
)

func file_n0stack_storage_v1alpha_disk_proto_rawDescGZIP() []byte {
	file_n0stack_storage_v1alpha_disk_proto_rawDescOnce.Do(func() {
		file_n0stack_storage_v1alpha_disk_proto_rawDescData = protoimpl.X.CompressGZIP(file_n0stack_storage_v1alpha_disk_proto_rawDescData)
	})
	return file_n0stack_storage_v1alpha_disk_proto_rawDescData
}

var file_n0stack_storage_v1alpha_disk_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_n0stack_storage_v1alpha_disk_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_n0stack_storage_v1alpha_disk_proto_goTypes = []interface{}{
	(DiskSpecStatus)(0),       // 0: n0stack.storage.v1alpha.DiskSpecStatus
	(DiskFactStatus)(0),       // 1: n0stack.storage.v1alpha.DiskFactStatus
	(*DiskSpec)(nil),          // 2: n0stack.storage.v1alpha.DiskSpec
	(*DiskFact)(nil),          // 3: n0stack.storage.v1alpha.DiskFact
	(*Disk)(nil),              // 4: n0stack.storage.v1alpha.Disk
	(*ListDisksRequest)(nil),  // 5: n0stack.storage.v1alpha.ListDisksRequest
	(*ListDisksResponse)(nil), // 6: n0stack.storage.v1alpha.ListDisksResponse
	(*GetDiskRequest)(nil),    // 7: n0stack.storage.v1alpha.GetDiskRequest
	(*DeleteDiskRequest)(nil), // 8: n0stack.storage.v1alpha.DeleteDiskRequest
	(*api.Metadata)(nil),      // 9: n0stack.storage.api.Metadata
	(*empty.Empty)(nil),       // 10: google.protobuf.Empty
}
var file_n0stack_storage_v1alpha_disk_proto_depIdxs = []int32{
	0,  // 0: n0stack.storage.v1alpha.DiskSpec.status:type_name -> n0stack.storage.v1alpha.DiskSpecStatus
	1,  // 1: n0stack.storage.v1alpha.DiskFact.status:type_name -> n0stack.storage.v1alpha.DiskFactStatus
	9,  // 2: n0stack.storage.v1alpha.Disk.metadata:type_name -> n0stack.storage.api.Metadata
	2,  // 3: n0stack.storage.v1alpha.Disk.spec:type_name -> n0stack.storage.v1alpha.DiskSpec
	3,  // 4: n0stack.storage.v1alpha.Disk.fact:type_name -> n0stack.storage.v1alpha.DiskFact
	4,  // 5: n0stack.storage.v1alpha.ListDisksResponse.disks:type_name -> n0stack.storage.v1alpha.Disk
	4,  // 6: n0stack.storage.v1alpha.DiskService.ApplyDisk:input_type -> n0stack.storage.v1alpha.Disk
	5,  // 7: n0stack.storage.v1alpha.DiskService.ListDisks:input_type -> n0stack.storage.v1alpha.ListDisksRequest
	7,  // 8: n0stack.storage.v1alpha.DiskService.GetDisk:input_type -> n0stack.storage.v1alpha.GetDiskRequest
	8,  // 9: n0stack.storage.v1alpha.DiskService.DeleteDisk:input_type -> n0stack.storage.v1alpha.DeleteDiskRequest
	4,  // 10: n0stack.storage.v1alpha.DiskService.ApplyDisk:output_type -> n0stack.storage.v1alpha.Disk
	6,  // 11: n0stack.storage.v1alpha.DiskService.ListDisks:output_type -> n0stack.storage.v1alpha.ListDisksResponse
	4,  // 12: n0stack.storage.v1alpha.DiskService.GetDisk:output_type -> n0stack.storage.v1alpha.Disk
	10, // 13: n0stack.storage.v1alpha.DiskService.DeleteDisk:output_type -> google.protobuf.Empty
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_n0stack_storage_v1alpha_disk_proto_init() }
func file_n0stack_storage_v1alpha_disk_proto_init() {
	if File_n0stack_storage_v1alpha_disk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_n0stack_storage_v1alpha_disk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n0stack_storage_v1alpha_disk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskFact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n0stack_storage_v1alpha_disk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n0stack_storage_v1alpha_disk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDisksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n0stack_storage_v1alpha_disk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDisksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n0stack_storage_v1alpha_disk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_n0stack_storage_v1alpha_disk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_n0stack_storage_v1alpha_disk_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_n0stack_storage_v1alpha_disk_proto_goTypes,
		DependencyIndexes: file_n0stack_storage_v1alpha_disk_proto_depIdxs,
		EnumInfos:         file_n0stack_storage_v1alpha_disk_proto_enumTypes,
		MessageInfos:      file_n0stack_storage_v1alpha_disk_proto_msgTypes,
	}.Build()
	File_n0stack_storage_v1alpha_disk_proto = out.File
	file_n0stack_storage_v1alpha_disk_proto_rawDesc = nil
	file_n0stack_storage_v1alpha_disk_proto_goTypes = nil
	file_n0stack_storage_v1alpha_disk_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DiskServiceClient is the client API for DiskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiskServiceClient interface {
	ApplyDisk(ctx context.Context, in *Disk, opts ...grpc.CallOption) (*Disk, error)
	ListDisks(ctx context.Context, in *ListDisksRequest, opts ...grpc.CallOption) (*ListDisksResponse, error)
	GetDisk(ctx context.Context, in *GetDiskRequest, opts ...grpc.CallOption) (*Disk, error)
	DeleteDisk(ctx context.Context, in *DeleteDiskRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type diskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiskServiceClient(cc grpc.ClientConnInterface) DiskServiceClient {
	return &diskServiceClient{cc}
}

func (c *diskServiceClient) ApplyDisk(ctx context.Context, in *Disk, opts ...grpc.CallOption) (*Disk, error) {
	out := new(Disk)
	err := c.cc.Invoke(ctx, "/n0stack.storage.v1alpha.DiskService/ApplyDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) ListDisks(ctx context.Context, in *ListDisksRequest, opts ...grpc.CallOption) (*ListDisksResponse, error) {
	out := new(ListDisksResponse)
	err := c.cc.Invoke(ctx, "/n0stack.storage.v1alpha.DiskService/ListDisks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) GetDisk(ctx context.Context, in *GetDiskRequest, opts ...grpc.CallOption) (*Disk, error) {
	out := new(Disk)
	err := c.cc.Invoke(ctx, "/n0stack.storage.v1alpha.DiskService/GetDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) DeleteDisk(ctx context.Context, in *DeleteDiskRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/n0stack.storage.v1alpha.DiskService/DeleteDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiskServiceServer is the server API for DiskService service.
type DiskServiceServer interface {
	ApplyDisk(context.Context, *Disk) (*Disk, error)
	ListDisks(context.Context, *ListDisksRequest) (*ListDisksResponse, error)
	GetDisk(context.Context, *GetDiskRequest) (*Disk, error)
	DeleteDisk(context.Context, *DeleteDiskRequest) (*empty.Empty, error)
}

// UnimplementedDiskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDiskServiceServer struct {
}

func (*UnimplementedDiskServiceServer) ApplyDisk(context.Context, *Disk) (*Disk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyDisk not implemented")
}
func (*UnimplementedDiskServiceServer) ListDisks(context.Context, *ListDisksRequest) (*ListDisksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDisks not implemented")
}
func (*UnimplementedDiskServiceServer) GetDisk(context.Context, *GetDiskRequest) (*Disk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisk not implemented")
}
func (*UnimplementedDiskServiceServer) DeleteDisk(context.Context, *DeleteDiskRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDisk not implemented")
}

func RegisterDiskServiceServer(s *grpc.Server, srv DiskServiceServer) {
	s.RegisterService(&_DiskService_serviceDesc, srv)
}

func _DiskService_ApplyDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Disk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).ApplyDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.storage.v1alpha.DiskService/ApplyDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).ApplyDisk(ctx, req.(*Disk))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_ListDisks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDisksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).ListDisks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.storage.v1alpha.DiskService/ListDisks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).ListDisks(ctx, req.(*ListDisksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_GetDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).GetDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.storage.v1alpha.DiskService/GetDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).GetDisk(ctx, req.(*GetDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_DeleteDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).DeleteDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.storage.v1alpha.DiskService/DeleteDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).DeleteDisk(ctx, req.(*DeleteDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DiskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "n0stack.storage.v1alpha.DiskService",
	HandlerType: (*DiskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyDisk",
			Handler:    _DiskService_ApplyDisk_Handler,
		},
		{
			MethodName: "ListDisks",
			Handler:    _DiskService_ListDisks_Handler,
		},
		{
			MethodName: "GetDisk",
			Handler:    _DiskService_GetDisk_Handler,
		},
		{
			MethodName: "DeleteDisk",
			Handler:    _DiskService_DeleteDisk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "n0stack/storage/v1alpha/disk.proto",
}
